/*
 * generated by Xtext
 */
package de.sos.etj.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.util.SimpleAttributeResolver;

import com.google.common.base.Function;
import com.google.inject.Inject;

import de.sos.etj.eTJ.ExtendResource;
import de.sos.etj.eTJ.ExtendTask;
import de.sos.etj.eTJ.ExtendedResourceAttribute;
import de.sos.etj.eTJ.ExtendedTaskAttribute;
import de.sos.etj.eTJ.Global;
import de.sos.etj.eTJ.Managers;
import de.sos.etj.eTJ.Project;
import de.sos.etj.eTJ.ProjectAttribute;
import de.sos.etj.eTJ.TaskDependency;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class ProjectScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject
	IQualifiedNameProvider qualifedNameProvider;

	private static final Function<EObject, String> resolver = SimpleAttributeResolver
			.newResolver(String.class, "id");
	
	private ProjectImportedNamespaceAwareLocalScopeProvider getProjectDelegate() {
		return  ((ProjectImportedNamespaceAwareLocalScopeProvider)getDelegate());
	}
	public IScope scope_Task(TaskDependency depends, EReference reference) {
		return getProjectDelegate().getScope(depends.eContainer().eContainer(),  reference, depends);
	}
	
	public IScope scope_Resource(Managers managers, EReference reference) {
		return getProjectDelegate().getScope(managers, reference, managers);
	}
	
	public IScope scope_ExtendedResourceAttribute_extend(EObject extendedResourceAttribute, EReference extend) {
		return scope_ExtendedAttribute_extend(extendedResourceAttribute);
	}
	public IScope scope_ExtendedTaskAttribute_extend(EObject extendedTaskAttribute, EReference extend) {
		return scope_ExtendedAttribute_extend(extendedTaskAttribute);
	}
	
	private IScope scope_ExtendedAttribute_extend(EObject extendedTaskAttribute) {
		IScope result = null;
		List<EObject> extnds = getExtends(extendedTaskAttribute);
		if(extnds != null) {
			result = Scopes.scopeFor(extnds,
				QualifiedName.wrapper(resolver), IScope.NULLSCOPE);
		}
		return result;
	}
	
	private List<EObject> getExtends(EObject extended) {
		EObject top = goToTop(extended);
		List<EObject> result = null;
		if(top instanceof Global) {
			Global global = (Global)top;
			Project project = global.getProject();
			if(extended instanceof ExtendedTaskAttribute) {
				result = loadTaskExtends(project);
			} else if(extended instanceof ExtendedResourceAttribute){
				result = loadResourceExtends(project);
			}

		}
		return result;
	}
	
	private List<EObject> loadTaskExtends(Project project) {
		List<EObject> result = new ArrayList<EObject>();
		for(ProjectAttribute attribute: project.getAttributes()) {
			if(attribute instanceof ExtendTask) {
				result.addAll(((ExtendTask)attribute).getExtends());
			}
		}
		return result;
	}
	private List<EObject> loadResourceExtends(Project project) {
		List<EObject> result = new ArrayList<EObject>();
		for(ProjectAttribute attribute: project.getAttributes()) {
			if(attribute instanceof ExtendResource) {
				result.addAll(((ExtendResource)attribute).getExtends());
			}
		}
		return result;
	}
	
	private EObject goToTop(EObject ref) {
		EObject result = null;
		result = ref;
		while (result.eContainer() != null) {
			result = result.eContainer();
		}
		return result;
	}
}
